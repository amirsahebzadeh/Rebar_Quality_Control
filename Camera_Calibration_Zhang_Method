from google.colab import drive
drive.mount('/content/drive')

#importing essential libraries
import cv2 as cv
import numpy as np
import glob
import os
import pickle
from google.colab.patches import cv2_imshow

#Calibration data Chessboard
datasets_path = '/content/drive/MyDrive/Camera Calibration'

# Reading all images in the directory dataset
images = glob.glob(os.path.join(datasets_path, '*.JPG'))

print(f"Found {len(images)} images in the dataset directory.") #find whether your images are reading or not.

objpoints = []
imgpoints = []
chessboardSize = (9, 6) #this part should be adjusted based on the chessboard size
objp = np.zeros((chessboardSize[0]*chessboardSize[1], 3), np.float32)
objp[:,:2] = np.mgrid[0:chessboardSize[0],0:chessboardSize[1]].T.reshape(-1,2) * 20

for image_file in images:
    img = cv.imread(image_file)
    if img is None:
        print(f"Failed to load image {image_file}")
        continue
    gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
    frameSize = gray.shape[::-1]

    # This part finds the corners of chessboard
    ret, corners = cv.findChessboardCorners(gray, chessboardSize, None)
    if ret:
        corners2 = cv.cornerSubPix(gray, corners, (11,11), (-1,-1), (cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER, 30, 0.001))
        objpoints.append(objp)
        imgpoints.append(corners2)
        print(f"Chessboard detected in {image_file}")
    else:
        print(f"Chessboard NOT detected in {image_file}")
#Saving and showing the camera calibration
if objpoints and imgpoints:
    ret, cameraMatrix, dist, rvecs, tvecs = cv.calibrateCamera(objpoints, imgpoints, frameSize, None, None)
    calibration_output_dir = 'calibration_data'
    os.makedirs(calibration_output_dir, exist_ok=True)
    pickle.dump((cameraMatrix, dist), open(os.path.join(calibration_output_dir, "calibration.pkl"), "wb"))
    pickle.dump(cameraMatrix, open(os.path.join(calibration_output_dir, "cameraMatrix.pkl"), "wb"))
    pickle.dump(dist, open(os.path.join(calibration_output_dir, "dist.pkl"), "wb"))

    print(f"Calibration data saved in directory: {calibration_output_dir}")
else:
    print("No valid data for calibration found in the images.")
